{"version":3,"sources":["utils/config.js","utils/ajax.js","utils/history.js","PrivateRoute.js","services/userServices.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["config","apiUrl","process","REACT_APP_API_URL","axiosRequest","method","url","options","payload","auth","params","requestConfig","data","Promise","resolve","reject","axios","then","res","status","catch","err","post","history","createBrowserHistory","PrivateRoute","props","checkAuth","console","log","setState","isAuthed","hasAuthed","message","error","msg","localStorage","removeItem","state","callback","userService","this","Component","component","path","exact","strict","render","to","pathname","from","location","React","BasicRoute","listen","action","HomeView","LoginView","RegisterView","App","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gMAKeA,EAFA,CAACC,OAF8B,OAAlCC,mHAAYC,kBAA6B,GAAKD,mHAAYC,mB,iBCChEC,EAAe,SAACC,GAAoC,IAA5BC,EAA2B,uDAArB,GAAIC,EAAiB,uDAAP,GAExCC,GADOD,EAAQE,KACLF,EAAQC,SAClBE,EAASH,EAAQG,OACjBC,EAAgB,CACpBN,SACAC,MACAI,SACAE,KAAMJ,GAKR,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAAV,OACjBC,IAAML,GACHM,MAAK,SAACC,GACc,MAAfA,EAAIC,OACNL,EAAQI,GAERH,EAAOG,MAGVE,OAAM,SAACC,GACNN,EAAOM,UAKJC,EAAO,SAAChB,GAAD,IAAMM,EAAN,uDAAa,GAAIH,EAAjB,+DAAkCL,EAAa,OAAQE,EAAK,CAAEE,QAASI,EAAMH,U,OC5BpFc,EAAUC,c,SCGFC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,UAAY,SAACf,GACTgB,QAAQC,IAAIjB,GACRA,EAAKO,QAAU,EACf,EAAKW,SAAS,CAACC,UAAU,EAAMC,WAAW,KAE1CC,IAAQC,MAAMtB,EAAKuB,KACnBC,aAAaC,WAAW,QACxB,EAAKP,SAAS,CAACC,UAAU,EAAOC,WAAW,MAb/C,EAAKM,MAAQ,CACTP,UAAU,EACVC,WAAW,GAJA,E,iEC8BK,SAACO,GACzB,IAAMjC,EAAG,UAAMN,EAAOC,OAAb,iBACTqB,EAAKhB,EAAK,IAAIW,MAAK,SAACC,GAAD,OAAOqB,EAASrB,MDX/BsB,CAAyBC,KAAKd,a,+BAIxB,IAAD,SAE6Dc,KAAKf,MAArDgB,EAFb,EAEEC,UAFF,IAEwBC,YAFxB,MAE6B,IAF7B,MAEiCC,aAFjC,aAE6CC,cAF7C,SAOL,OAHAlB,QAAQC,IAAIY,KAAKH,MAAMP,UAGlBU,KAAKH,MAAMN,UAKT,kBAAC,IAAD,CAAOY,KAAMA,EAAMC,MAAOA,EAAOC,OAAQA,EAAQC,OAAQ,SAAArB,GAAK,OACjE,EAAKY,MAAMP,SACP,kBAACW,EAAchB,GAEf,kBAAC,IAAD,CAAUsB,GAAI,CACVC,SAAU,SACVX,MAAO,CAACY,KAAMxB,EAAMyB,gBAVrB,S,GAlCuBC,IAAMV,W,mDEiCjCW,E,kDA3BX,WAAY3B,GAAQ,IAAD,6BACf,cAAMA,GAGNH,EAAQ+B,QAAO,SAACH,EAAUI,GAEtB3B,QAAQC,IAAIsB,EAASI,MANV,E,qDAWf,OACI,kBAAC,IAAD,CAAQhC,QAASA,GACb,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAcsB,OAAK,EAACD,KAAK,IAAID,UAAWa,MACxC,kBAAC,IAAD,CAAOX,OAAK,EAACD,KAAK,SAASD,UAAWc,MACtC,kBAAC,IAAD,CAAOZ,OAAK,EAACD,KAAK,YAAYD,UAAWe,MACzC,kBAAC,IAAD,CAAUR,KAAK,KAAKF,GAAG,Y,GAnBlBI,IAAMV,WCGhBiB,E,uKANX,OACI,kBAAC,EAAD,U,GAHUP,IAAMV,WCSJkB,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MAAM,2DCZnCC,IAASjB,OACP,kBAAC,IAAMkB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAACsD,GACLA,EAAaC,gBAEdpD,OAAM,SAACc,GACNN,QAAQM,MAAMA,EAAMD,a","file":"static/js/main.273c28f8.chunk.js","sourcesContent":["// API URL config\nconst api = process.env.REACT_APP_API_URL === null ? '' : process.env.REACT_APP_API_URL;\n\nconst config = {apiUrl: api};\n\nexport default config;\n","import axios from 'axios';\n\nconst axiosRequest = (method, url = '', options = {}) => {\n    const auth = options.auth;\n    const payload = options.payload;\n    const params = options.params;\n    const requestConfig = {\n      method,\n      url,\n      params,\n      data: payload,\n    };\n    if (auth) {\n      // TODO: implement authentication\n    }\n    return new Promise((resolve, reject) =>\n      axios(requestConfig)\n        .then((res) => {\n          if (res.status === 200) {\n            resolve(res);\n          } else {\n            reject(res);\n          }\n        })\n        .catch((err) => {\n          reject(err);\n        })\n    );\n  };\n\nexport const post = (url, data = {}, auth = false) => axiosRequest('post', url, { payload: data, auth });\n\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n","import React from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport * as userService from \"./services/userServices\";\nimport {message} from \"antd\";\n\nexport default class PrivateRoute extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAuthed: false,        //已经登陆\n            hasAuthed: false,       //曾经登陆过\n        };\n    }\n\n    checkAuth = (data) => {\n        console.log(data);\n        if (data.status >= 0) {\n            this.setState({isAuthed: true, hasAuthed: true});\n        } else {\n            message.error(data.msg);\n            localStorage.removeItem('user');\n            this.setState({isAuthed: false, hasAuthed: true});\n        }\n    };\n\n\n    componentDidMount() {\n        userService.checkSession(this.checkAuth);\n    }\n\n\n    render() {\n\n        const {component: Component, path=\"/\",exact=false,strict=false} = this.props;\n\n        console.log(this.state.isAuthed);\n\n        //如果曾经没有登陆过，那么直接返回NULL\n        if (!this.state.hasAuthed) {\n            return null;\n        }\n\n\n        return <Route path={path} exact={exact} strict={strict} render={props => (\n            this.state.isAuthed ? (\n                <Component {...props}/>\n            ) : (\n                <Redirect to={{\n                    pathname: '/login',\n                    state: {from: props.location}\n                }}/>\n            )\n        )}/>\n    }\n}\n","import config from '../utils/config';\nimport {post} from \"../utils/ajax\";\nimport {history} from '../utils/history';\nimport {message} from 'antd';\n\nexport const login = (data) => {\n    const url = `${config.apiUrl}/login`;\n    const callback = (data) => {\n        if(data.status >= 0) {\n            localStorage.setItem('user', JSON.stringify(data.data));\n            history.push(\"/\");\n            message.success(data.msg);\n        }\n        else{\n            message.error(data.msg);\n        }\n    };\n    post(url, data).then((res)=> callback(res));\n};\n\nexport const logout = () => {\n    const url = `${config.apiUrl}/logout`;\n\n    const callback = (data) => {\n        if(data.status >= 0) {\n            localStorage.removeItem(\"user\");\n            history.push(\"/login\");\n            message.success(data.msg);\n        }\n        else{\n            message.error(data.msg);\n        }\n    };\n    post(url, {}).then((res)=>callback(res));\n};\n\nexport const checkSession = (callback) => {\n    const url = `${config.apiUrl}/checkSession`;\n    post(url, {}).then((res)=>callback(res));\n};\n","import React from 'react';\nimport { Router, Route, Switch, Redirect} from 'react-router-dom';\nimport PrivateRoute from './PrivateRoute';\nimport HomeView from \"./views/homeView/HomeView\";\nimport LoginView from './views/loginView/LoginView';\nimport RegisterView from './views/registerView/RegisterView';\nimport {history} from \"./utils/history\";\n\n\nclass BasicRoute extends React.Component{\n\n    constructor(props) {\n        super(props);\n\n        //history监听路由\n        history.listen((location, action) => {\n            // clear alert on location change\n            console.log(location,action);\n        });\n    }\n\n    render(){\n        return(\n            <Router history={history}>\n                <Switch>\n                    <PrivateRoute exact path=\"/\" component={HomeView} />\n                    <Route exact path=\"/login\" component={LoginView} />\n                    <Route exact path=\"/register\" component={RegisterView} />\n                    <Redirect from=\"/*\" to=\"/\" />\n                </Switch>\n\n            </Router>\n        )\n    }\n\n\n}\n\nexport default BasicRoute;\n","import React from 'react';\nimport './App.css';\nimport BasicRoute from \"./Router\";\n\nclass App extends React.Component {\n  render() {\n    return (\n        <BasicRoute/>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}