{"version":3,"sources":["utils/config.js","utils/ajax.js","utils/history.js","PrivateRoute.js","services/userServices.js","component/Avatar/Avatar.js","component/Button/FollowButton.js","component/ProfileHeader/ProfileHeader.js","views/Activity/Activity.js","Router.js","utils/theme.js","App.js","serviceWorker.js","index.js"],"names":["config","apiUrl","process","REACT_APP_API_URL","axiosRequest","method","url","options","payload","auth","params","requestConfig","data","Promise","resolve","reject","axios","then","res","status","catch","err","post","history","createBrowserHistory","PrivateRoute","props","useState","isAuthed","setIsAuthed","hasAuthed","setHasAuthed","checkAuth","message","error","msg","localStorage","removeItem","useEffect","callback","userService","Component","component","path","exact","strict","render","to","pathname","state","from","location","Avatar","large","src","style","width","height","FollowButton","followed","onClick","muiBtnProps","color","variant","startIcon","Button","ProfileHeader","username","gender","intro","img","setFollowed","className","role","aria-label","Activity","value","setValue","Tabs","indicatorColor","textColor","onChange","ev","newVal","Tab","label","BasicRoute","HomeView","LoginView","RegisterView","blueTheme","createMuiTheme","palette","primary","blue","App","ThemeProvider","theme","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.de4bb9bd.chunk.js","sourcesContent":["// API URL config\nconst api = process.env.REACT_APP_API_URL === null ? '' : process.env.REACT_APP_API_URL;\n\nconst config = { apiUrl: api };\n\nexport default config;\n","import axios from 'axios';\n\nconst axiosRequest = (method, url = '', options = {}) => {\n  const auth = options.auth;\n  const payload = options.payload;\n  const params = options.params;\n  const requestConfig = {\n    method,\n    url,\n    params,\n    data: payload,\n  };\n  if (auth) {\n    // TODO: implement authentication\n  }\n  return new Promise((resolve, reject) =>\n    axios(requestConfig)\n      .then((res) => {\n        if (res.status === 200) {\n          resolve(res);\n        } else {\n          reject(res);\n        }\n      })\n      .catch((err) => {\n        reject(err);\n      })\n  );\n};\n\nexport const post = (url, data = {}, auth = false) => axiosRequest('post', url, { payload: data, auth });\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\nimport * as userService from './services/userServices';\nimport { message } from 'antd';\n\nconst PrivateRoute = (props) => {\n  const [isAuthed, setIsAuthed] = useState(false); // 已经登陆\n  const [hasAuthed, setHasAuthed] = useState(false); // 曾经登陆过\n\n  const checkAuth = (data) => {\n    if (data.status >= 0) {\n      setIsAuthed(true);\n      setHasAuthed(true);\n    } else {\n      message.error(data.msg);\n      localStorage.removeItem('user');\n      setIsAuthed(false);\n      setHasAuthed(true);\n    }\n  };\n\n  useEffect(() => userService.checkSession(checkAuth));\n  const { component: Component, path = '/', exact = false, strict = false } = props;\n\n  // 如果曾经没有登陆过，那么直接返回NULL\n  if (!hasAuthed) {\n    return null;\n  }\n\n  return (\n    <Route\n      path={path}\n      exact={exact}\n      strict={strict}\n      render={(props) =>\n        isAuthed ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/login',\n              state: { from: props.location },\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nPrivateRoute.propTypes = {\n  location: PropTypes.any.isRequired,\n  component: PropTypes.any,\n  path: PropTypes.any,\n  exact: PropTypes.any,\n  strict: PropTypes.any,\n};\n\nexport default PrivateRoute;\n","import config from '../utils/config';\nimport { post } from '../utils/ajax';\nimport { history } from '../utils/history';\nimport { message } from 'antd';\n\nexport const login = (data) => {\n  const url = `${config.apiUrl}/login`;\n  const callback = (data) => {\n    if (data.status >= 0) {\n      localStorage.setItem('user', JSON.stringify(data.data));\n      history.push('/');\n      message.success(data.msg);\n    } else {\n      message.error(data.msg);\n    }\n  };\n  post(url, data).then((res) => callback(res));\n};\n\nexport const logout = () => {\n  const url = `${config.apiUrl}/logout`;\n\n  const callback = (data) => {\n    if (data.status >= 0) {\n      localStorage.removeItem('user');\n      history.push('/login');\n      message.success(data.msg);\n    } else {\n      message.error(data.msg);\n    }\n  };\n  post(url, {}).then((res) => callback(res));\n};\n\nexport const checkSession = (callback) => {\n  const url = `${config.apiUrl}/checkSession`;\n  post(url, {}).then((res) => callback(res));\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Avatar as MaterialAvatar } from '@material-ui/core';\n\nconst Avatar = (props) =>\n  props.large ? (\n    <div>\n      <MaterialAvatar src={props.src} style={{ width: '160px', height: '160px' }} />\n    </div>\n  ) : (\n    <div>\n      <MaterialAvatar src={props.src} />\n    </div>\n  );\n\nAvatar.propTypes = {\n  src: PropTypes.string.isRequired,\n  large: PropTypes.bool,\n};\n\nexport default Avatar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst FollowButton = ({ followed, onClick }) => {\n  const muiBtnProps = {\n    color: followed ? 'default' : 'primary',\n    variant: 'contained',\n    startIcon: followed ? <CheckIcon /> : <AddIcon />,\n    onClick,\n  };\n\n  return <Button {...muiBtnProps}>{followed ? '已关注' : '关注'}</Button>;\n};\n\nFollowButton.propTypes = {\n  followed: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default FollowButton;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './ProfileHeader.css';\nimport Avatar from '../../component/Avatar/Avatar';\nimport FollowButton from '../Button/FollowButton';\n\nconst ProfileHeader = (props) => {\n  const username = props.data.username;\n  const gender = props.data.gender;\n  const intro = props.data.intro;\n  const img = props.data.img;\n  const [followed, setFollowed] = useState(false);\n\n  return (\n    <div className={'profile-card card'}>\n      <div className=\"profile-header\">\n        {/* User Avatar */}\n        <div className=\"profile-avatar\">\n          <Avatar large className={'avatar'} src={img} />\n        </div>\n        {/* User Info */}\n        <div className=\"profile-info\">\n          <h1 className=\"user-name\">{username}</h1>\n          {gender === 0 && (\n            <span role=\"img\" aria-label=\"male\">\n              👨\n            </span>\n          )}\n          {gender === 1 && (\n            <span role=\"img\" aria-label=\"male\">\n              👩\n            </span>\n          )}\n          <div className=\"divider\" />\n          <span className={'profile-detail'}>{intro}</span>\n          <div className=\"profile-footer\">\n            <FollowButton followed={followed} onClick={() => setFollowed(!followed)} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nProfileHeader.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default ProfileHeader;\n","import React, { useState } from 'react';\nimport ProfileHeader from '../../component/ProfileHeader/ProfileHeader';\nimport './Activity.css';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport PersonIcon from '@material-ui/icons/Person';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\nconst Activity = () => {\n  const [value, setValue] = useState(0);\n  const handleChange = (ev, newVal) => setValue(newVal);\n\n  return (\n    <div>\n      <ProfileHeader\n        data={{\n          username: 'QAQ 小编',\n          gender: 1,\n          img: 'https://avatars1.githubusercontent.com/u/71007591',\n          intro: '哦！我向上帝发誓，我什么也不知道。我打赌，我会把QAQ问到倒闭！看在玛丽亚的份上，请回答我的问题吧！',\n        }}\n      />\n      <div className=\"profile-main\">\n        <div className=\"card profile-act\">\n          <Tabs value={value} indicatorColor=\"primary\" textColor=\"primary\" onChange={handleChange} aria-label=\"disabled tabs example\">\n            <Tab label=\"动态\" style={{ width: '10px' }} />\n            <Tab label=\"回答\" />\n            <Tab label=\"问题\" />\n            <Tab label=\"关注\" />\n          </Tabs>\n        </div>\n        <div className=\"profile-side\">\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <div className=\"card-header-text\">我的 QAQ</div>\n            </div>\n            <div className=\"side-stat-detail\">\n              <div className=\"side-stat-detail-item\">\n                <div className=\"side-icon\">\n                  <PersonIcon />\n                </div>\n                <span>关注了 114 个用户</span>\n              </div>\n              <div className=\"side-stat-detail-item\">\n                <div className=\"side-icon\">\n                  <VisibilityIcon />\n                </div>\n                <span>关注了 514 个问题</span>\n              </div>\n              <div className=\"side-stat-detail-item\">\n                <div className=\"side-icon\">\n                  <ThumbUpIcon />\n                </div>\n                <span>获得了 233 个赞同</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Activity;\n","import React from 'react';\nimport { Router, Route, Switch, Redirect, Link } from 'react-router-dom';\nimport PrivateRoute from './PrivateRoute';\nimport HomeView from './views/homeView/HomeView';\nimport LoginView from './views/loginView/LoginView';\nimport RegisterView from './views/registerView/RegisterView';\nimport Activity from './views/Activity/Activity';\nimport { history } from './utils/history';\n\nconst BasicRoute = () => (\n  <>\n    <Router history={history}>\n      <div>\n        This part is for development preview purpose when the homepage is not fully implemented. Remove this section after the HomeView is done.\n        <Link to=\"/people\">用户动态(Avatar, Follow Button, Profile Header)</Link>\n      </div>\n      <Switch>\n        <PrivateRoute exact path=\"/\" component={HomeView} />\n        <Route path=\"/people\">\n          <Activity />\n        </Route>\n        <Route exact path=\"/login\" component={LoginView} />\n        <Route exact path=\"/register\" component={RegisterView} />\n        <Redirect from=\"/*\" to=\"/\" />\n      </Switch>\n    </Router>\n  </>\n);\n\nexport default BasicRoute;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\n\nexport const blueTheme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n","import React from 'react';\nimport './App.css';\nimport BasicRoute from './Router';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { blueTheme } from './utils/theme';\n\nconst App = () => (\n  <div className=\"App\">\n    <ThemeProvider theme={blueTheme}>\n      <BasicRoute />\n    </ThemeProvider>\n  </div>\n);\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}